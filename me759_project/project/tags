!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/vinayg\/me759_project$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/vinayg\/me759_project$/;"	m
CUDA_CHECK_RETURN	time.h	/^int CUDA_CHECK_RETURN(cudaError_t err_ret){$/;"	f
EQUALS	Makefile	/^EQUALS = =$/;"	m
FILE	stdio-wrapper.h	42;"	d
INPUT_FILENAME	main.cpp	40;"	d	file:
MAXLABELS	haar.h	43;"	d
MyImage	image.h	/^MyImage;$/;"	t	typeref:struct:__anon3
MyIntImage	image.h	/^MyIntImage;$/;"	t	typeref:struct:__anon4
MyPoint	haar.h	/^MyPoint;$/;"	t	typeref:struct:MyPoint
MyPoint	haar.h	/^typedef struct MyPoint$/;"	s
MyRect	haar.h	/^MyRect;$/;"	t	typeref:struct:__anon2
MySize	haar.h	/^MySize;$/;"	t	typeref:struct:__anon1
OUTPUT_FILENAME	main.cpp	41;"	d	file:
RM	Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
STDIO_WRAPPER_INCLUDED	stdio-wrapper.h	35;"	d
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
SYSACE_FILE	stdio-wrapper.h	68;"	d
ScaleImage_Invoker	haar.cu	/^void ScaleImage_Invoker( myCascade* _cascade, float _factor, int sum_row, int sum_col, std::vector<MyRect>& _vec)$/;"	f
UPPERBITS	haar.cu	383;"	d	file:
UPPERBITS	haar.cu	385;"	d	file:
VERBOSE	Makefile	/^VERBOSE = 1$/;"	m
VERBOSE	stdio-wrapper.h	37;"	d
__ERROR_HANDLE__H_	time.h	2;"	d
__HAAR_H__	haar.h	35;"	d
__IMAGE_H__	image.h	35;"	d
__NN_H__	nearestNeighbor_kernel.cu	37;"	d	file:
alpha1_array	haar.cu	/^static int *alpha1_array;$/;"	v	file:
alpha2_array	haar.cu	/^static int *alpha2_array;$/;"	v	file:
clock_counter	haar.cu	/^int clock_counter = 0;$/;"	v
cpyPgm	image.c	/^int cpyPgm(MyImage* src, MyImage* dst)$/;"	f
createImage	image.c	/^void createImage(int width, int height, MyImage *image)$/;"	f
createSumImage	image.c	/^void createSumImage(int width, int height, MyIntImage *image)$/;"	f
data	image.h	/^	int* data;$/;"	m	struct:__anon4
data	image.h	/^	unsigned char* data;$/;"	m	struct:__anon3
detectObjects	haar.cu	/^std::vector<MyRect> detectObjects( MyImage* _img, MySize minSize, MySize maxSize, myCascade* cascade,$/;"	f
drawRectangle	rectangles.cpp	/^void drawRectangle(MyImage* image, MyRect r)$/;"	f
evalWeakClassifier	haar.cu	/^inline int evalWeakClassifier(int variance_norm_factor, int p_offset, int tree_index, int w_index, int r_index )$/;"	f
fclose	stdio-wrapper.h	44;"	d
feof	stdio-wrapper.h	54;"	d
fgetc	stdio-wrapper.h	49;"	d
fgets	stdio-wrapper.h	52;"	d
flag	image.h	/^	int flag;$/;"	m	struct:__anon3
flag	image.h	/^	int flag;$/;"	m	struct:__anon4
fopen	stdio-wrapper.h	43;"	d
fprintf	stdio-wrapper.h	56;"	d
fputc	stdio-wrapper.h	51;"	d
fputs	stdio-wrapper.h	53;"	d
fread	stdio-wrapper.h	45;"	d
freeImage	image.c	/^int freeImage(MyImage* image)$/;"	f
freeSumImage	image.c	/^int freeSumImage(MyIntImage* image)$/;"	f
fseek	stdio-wrapper.h	48;"	d
ftell	stdio-wrapper.h	47;"	d
fwrite	stdio-wrapper.h	46;"	d
groupRectangles	rectangles.cpp	/^void groupRectangles(std::vector<MyRect>& rectList, int groupThreshold, float eps)$/;"	f
height	haar.h	/^    int height;$/;"	m	struct:__anon1
height	haar.h	/^    int height;$/;"	m	struct:__anon2
height	image.h	/^	int height;$/;"	m	struct:__anon3
height	image.h	/^	int height;$/;"	m	struct:__anon4
int_sqrt	haar.cu	/^unsigned int int_sqrt (unsigned int value)$/;"	f
integralImages	haar.cu	/^void integralImages( MyImage *src, MyIntImage *sum, MyIntImage *sqsum )$/;"	f
inv_window_area	haar.h	/^    int inv_window_area;$/;"	m	struct:myCascade
iter_counter	haar.cu	/^int iter_counter = 0;$/;"	v
itochar	image.c	/^void itochar(int x, char* szBuffer, int radix)$/;"	f
main	main.cpp	/^int main (int argc, char *argv[]) $/;"	f
maxgrey	image.h	/^	int maxgrey;$/;"	m	struct:__anon3
myAbs	rectangles.cpp	/^int myAbs(int n)$/;"	f
myCascade	haar.h	/^typedef struct myCascade$/;"	s
myCascade	haar.h	/^} myCascade;$/;"	t	typeref:struct:myCascade
myMax	rectangles.cpp	/^int myMax(int a, int b)$/;"	f
myMin	rectangles.cpp	/^int myMin(int a, int b)$/;"	f
myRound	haar.cu	/^inline  int  myRound( float value )$/;"	f
myRound	rectangles.cpp	/^inline  int  myRound( float value )$/;"	f
myatoi	image.c	/^int myatoi (char* string)$/;"	f
n_features	haar.cu	/^float n_features = 0;$/;"	v
n_stages	haar.h	/^    int  n_stages;$/;"	m	struct:myCascade
nearestNeighborOnHost	haar.cu	/^void nearestNeighborOnHost(MyImage *src, MyImage *dst)$/;"	f
orig_window_size	haar.h	/^    MySize orig_window_size;$/;"	m	struct:myCascade
p0	haar.h	/^    sumtype *p0, *p1, *p2, *p3;$/;"	m	struct:myCascade
p1	haar.h	/^    sumtype *p0, *p1, *p2, *p3;$/;"	m	struct:myCascade
p2	haar.h	/^    sumtype *p0, *p1, *p2, *p3;$/;"	m	struct:myCascade
p3	haar.h	/^    sumtype *p0, *p1, *p2, *p3;$/;"	m	struct:myCascade
partition	rectangles.cpp	/^int partition(std::vector<MyRect>& _vec, std::vector<int>& labels, float eps)$/;"	f
pq0	haar.h	/^    sqsumtype *pq0, *pq1, *pq2, *pq3;$/;"	m	struct:myCascade
pq1	haar.h	/^    sqsumtype *pq0, *pq1, *pq2, *pq3;$/;"	m	struct:myCascade
pq2	haar.h	/^    sqsumtype *pq0, *pq1, *pq2, *pq3;$/;"	m	struct:myCascade
pq3	haar.h	/^    sqsumtype *pq0, *pq1, *pq2, *pq3;$/;"	m	struct:myCascade
predicate	rectangles.cpp	/^int predicate(float eps, MyRect& r1, MyRect& r2)$/;"	f
printf	stdio-wrapper.h	55;"	d
putc	stdio-wrapper.h	50;"	d
readPgm	image.c	/^int readPgm(char *fileName, MyImage *image)$/;"	f
readTextClassifier	haar.cu	/^void readTextClassifier()\/\/(myCascade * cascade)$/;"	f
rectangles_array	haar.cu	/^static int *rectangles_array;$/;"	v	file:
reduction	nearestNeighbor_kernel.cu	/^__global__ void reduction(double *g_data, double* array_sum, int n)$/;"	f
releaseTextClassifier	haar.cu	/^void releaseTextClassifier()$/;"	f
runCascadeClassifier	haar.cu	/^int runCascadeClassifier( myCascade* _cascade, MyPoint pt, int start_stage )$/;"	f
scale	haar.h	/^    float scale; $/;"	m	struct:myCascade
scaled_rectangles_array	haar.cu	/^static int **scaled_rectangles_array;$/;"	v	file:
setImage	image.c	/^void setImage(int width, int height, MyImage *image)$/;"	f
setImageForCascadeClassifier	haar.cu	/^void setImageForCascadeClassifier( myCascade* _cascade, MyIntImage* _sum, MyIntImage* _sqsum)$/;"	f
setSumImage	image.c	/^void setSumImage(int width, int height, MyIntImage *image)$/;"	f
sqsum	haar.h	/^    MyIntImage sqsum;$/;"	m	struct:myCascade
sqsumtype	haar.h	/^typedef int sqsumtype;$/;"	t
stages_array	haar.cu	/^static int *stages_array;$/;"	v	file:
stages_thresh_array	haar.cu	/^static int *stages_thresh_array;$/;"	v	file:
strrev	image.c	/^char* strrev(char* str)$/;"	f
sum	haar.h	/^    MyIntImage sum;$/;"	m	struct:myCascade
sumtype	haar.h	/^typedef  int sumtype;$/;"	t
sysace_fclose	stdio-wrapper.h	70;"	d
sysace_feof	stdio-wrapper.c	/^int sysace_feof(SYSACE_FILE *stream)$/;"	f
sysace_feof	stdio-wrapper.h	79;"	d
sysace_fgetc	stdio-wrapper.c	/^int sysace_fgetc(SYSACE_FILE *stream)$/;"	f
sysace_fgetc	stdio-wrapper.h	75;"	d
sysace_fgets	stdio-wrapper.c	/^ char * sysace_fgets(char *s, int n, SYSACE_FILE *iop)$/;"	f
sysace_fgets	stdio-wrapper.h	77;"	d
sysace_fopen	stdio-wrapper.h	69;"	d
sysace_fputs	stdio-wrapper.c	/^int sysace_fputs(const char *s, SYSACE_FILE *iop)$/;"	f
sysace_fputs	stdio-wrapper.h	78;"	d
sysace_fread	stdio-wrapper.h	71;"	d
sysace_fseek	stdio-wrapper.c	/^int sysace_fseek(SYSACE_FILE *stream, long offset, int whence)$/;"	f
sysace_fseek	stdio-wrapper.h	74;"	d
sysace_ftell	stdio-wrapper.c	/^long sysace_ftell(SYSACE_FILE *stream)$/;"	f
sysace_ftell	stdio-wrapper.h	73;"	d
sysace_fwrite	stdio-wrapper.h	72;"	d
sysace_putc	stdio-wrapper.c	/^int sysace_putc(int c, SYSACE_FILE *stream)$/;"	f
sysace_putc	stdio-wrapper.h	76;"	d
total_nodes	haar.h	/^    int total_nodes;$/;"	m	struct:myCascade
tree_thresh_array	haar.cu	/^static int *tree_thresh_array;$/;"	v	file:
weights_array	haar.cu	/^static int *weights_array;$/;"	v	file:
width	haar.h	/^    int width;$/;"	m	struct:__anon1
width	haar.h	/^    int width;$/;"	m	struct:__anon2
width	image.h	/^	int width;$/;"	m	struct:__anon3
width	image.h	/^	int width;$/;"	m	struct:__anon4
writePgm	image.c	/^int writePgm(char *fileName, MyImage *image)$/;"	f
x	haar.h	/^    int x;$/;"	m	struct:MyPoint
x	haar.h	/^    int x;$/;"	m	struct:__anon2
xil_printf	stdio-wrapper.h	80;"	d
y	haar.h	/^    int y;$/;"	m	struct:MyPoint
y	haar.h	/^    int y;$/;"	m	struct:__anon2
